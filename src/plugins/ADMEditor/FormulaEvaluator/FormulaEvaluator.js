/**
* Generated by PluginGenerator from webgme on Wed Aug 06 2014 14:03:02 GMT-0500 (Central Daylight Time).
*/

define(['plugin/PluginConfig', 'plugin/PluginBase', 'plugin/FormulaEvaluator/FormulaEvaluator/meta'], function (PluginConfig, PluginBase, MetaTypes) {
    'use strict';

    /**
    * Initializes a new instance of FormulaEvaluator.
    * @class
    * @augments {PluginBase}
    * @classdesc This class represents the plugin FormulaEvaluator.
    * @constructor
    */
    var FormulaEvaluator = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.metaTypes = MetaTypes;
    };

    // Prototypal inheritance from PluginBase.
    FormulaEvaluator.prototype = Object.create(PluginBase.prototype);
    FormulaEvaluator.prototype.constructor = FormulaEvaluator;

    /**
    * Gets the name of the FormulaEvaluator.
    * @returns {string} The name of the plugin.
    * @public
    */
    FormulaEvaluator.prototype.getName = function () {
        return "FormulaEvaluator";
    };

    /**
    * Gets the semantic version (semver.org) of the FormulaEvaluator.
    * @returns {string} The version of the plugin.
    * @public
    */
    FormulaEvaluator.prototype.getVersion = function () {
        return "0.1.0";
    };

    /**
    * Main function for the plugin to execute. This will perform the execution.
    * Notes:
    * - Always log with the provided logger.[error,warning,info,debug].
    * - Do NOT put any user interaction logic UI, etc. inside this method.
    * - callback always has to be called even if error happened.
    *
    * @param {function(string, plugin.PluginResult)} callback - the result callback
    */
    FormulaEvaluator.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this;
        self.updateMETA(self.metaTypes);
        // Using the logger.
        self.logger.info('This is a debug message.');
        self.logger.info('This is an info message.');
        self.logger.warning('This is a warning message.');
        self.logger.error('This is an error message.');

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        self.result.setSuccess(true);
        self.save('added obj', function (err) {
            callback(null, self.result);
        });

    };

    return FormulaEvaluator;
});